package dev.ny.aoc;

import lombok.Data;
import lombok.EqualsAndHashCode;

import java.util.*;
import java.util.stream.Collectors;

public class Day18 {
    public static void main(String[] args) {
        final Navigator nav = new Navigator(INPUT);
        nav.solve();
    }

    private static final String INPUT = "#################################################################################\n" +
            "#.#..a....#...#..........y..#.#.........#.I...#...#.....#.............#.......#.#\n" +
            "#.#.###.###.#.#P#########.#.#S#.#######.#.###.#.#.###.#.###.#########.#.#####.#.#\n" +
            "#.#...#.#...#...#.......#.#.#.#...#z....#...#.#.#.#...#...#.#...#.....#.#.......#\n" +
            "#.###.#.#.#######.#######.#.#.###.#.#####.#.#.#.#.#.#####.#.#.#.#.#####.#######.#\n" +
            "#q..#.#...#.#.....#.....#.#.#.....#.....#.#.#.#.#.#.....#..c#.#.#.......#.....#.#\n" +
            "#.###.#####.#.#.#.#.###.#.#.###########.#.#.#.#.#.#####.#####.#.#########.###.#.#\n" +
            "#.#...#.....#.#.#.#...#...#......b......#.#.#...#...#...#...#.#.....#.....#.#.#.#\n" +
            "#.#.###.#####.#.#####.#####.#######.#####.#.#######.#.#.#.#.#.#####.#.#####.#.###\n" +
            "#.#...#.......#.....#.#.....#.....#.#l..#.#...#.D.....#.#.#...#...#...#.....#...#\n" +
            "#.###.###.#######.#.#.#######.###.###.#.#.###.###.#####.#.#######.#####.###.###.#\n" +
            "#...#...#...#...#.#.#.......#...#.....#.#...#...#.#...#n#.#.......#....r..#.#...#\n" +
            "#.#.###.###.#.#.###.#######.###.#######.#######.#.#.#.#.#.#.#####.#.#######.#.###\n" +
            "#.#...#...#.#.#...........#...#.#.#...#.#.......#.#.#.#.#...#...#.#.....#...#...#\n" +
            "###.#####.###.###########.#.###.#.#.#.#.#.###.#####.#.#.#####.###.#######.#.###A#\n" +
            "#...#.....#...#...........#.#...#.#v#...#.#...#.....#.#...#...............#.#...#\n" +
            "#.###.#####.###.#####.#####.#.###.#.#####.#####.#####.#####.#################.###\n" +
            "#.....#.....#...#.G.#.#...#.......#.#...#...#.....#...#.....#.........#.....#.#.#\n" +
            "#.#####.#####.###.#.###.#.#######.#.###.#.#.#.#####.#.#.#####.#######.#.###.#.#.#\n" +
            "#.R...#.#.....#...#.#x..#...F.#.#.#...#.#.#...#...#.#.#.#...#.#.#...#.#...#...#.#\n" +
            "#####.#.#######.###.#.#######.#.#.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.###.#####.#\n" +
            "#.#...#.........#...#.#.....#.#...#...#.#.#...#.#...#.#...#.#.#...#.#.....#...#.#\n" +
            "#.#.#########.###.#.###.###.#.#####.###.#.#.#.#.###.#######.#######.#######.#.#.#\n" +
            "#...#.......#.#...#.....#.#.#.......#...#.#.#.#...#.#.....#.......#.#.....T.#...#\n" +
            "#.#####.###.#.#.#########.#.#########.###.#.#.###.#.#.###.#######.#.#.#.#######.#\n" +
            "#...M.#.#...#.#.....#.....#...#.........#.#.#.....#.#.#.#.....#.#.#...#.#.....#.#\n" +
            "#####.#.###.#.#####.###.#.###.#####.###.#.#.#########.#.###.#.#.#.#.###.#.###.#.#\n" +
            "#...#.#...#.#.....#...#.#...#.....#...#.#.#.......#...#.#...#...#.#.#...#...#.#.#\n" +
            "#.###.###.#.#########.#.#########.#####.#.#######.#.###.#.#######.#.#.#####.#.#.#\n" +
            "#...#.....#...........#.....#...#.......#.....#.#...#...#...#.....#.#.......#.#.#\n" +
            "#K#.###################.###.#.#.#######.#####.#.#######.###.#.#####.#########.#.#\n" +
            "#.#...........#.....#...#.#.#.#.......#.#.#...#...#.......#...#.............#.#.#\n" +
            "#.#.###.#######.#.###.###.#.#.#####.###.#.#.###.###.#.###.#####.#############.###\n" +
            "#.#.#...#.......#.....#...#...#...#...#.#...#.......#...#.....#.....#.......#...#\n" +
            "#.#.#.###.#############.#.#####.#.###.#.#.#########.###.#######.#####.#####.###.#\n" +
            "#.#.#...#.....#...H.....#.......#...#...#.#.......#...#.....#...#.....#...#...#.#\n" +
            "#.#.###.#####.#######.#########.###.#####.#.#####.###.#####.#.###.#####.#.###.#.#\n" +
            "#.#.#...#.....#.....#.......#...#...#...#...#.....#.......#.....#.....#.#...#.#.#\n" +
            "#.#.#####.#####.###.#########.###.#####.#####.#######################.#.#.###.#.#\n" +
            "#.#..........u..#.............#o......................................#.#....k..#\n" +
            "#######################################.@.#######################################\n" +
            "#.#.......#.............#.......#...................#.....#....h......#.......#.#\n" +
            "#.#.#####.#.#######.#####.#####.#.#.###.#.###.#####.###O#.###.#######.#.#####.#.#\n" +
            "#.#.....#...#.....#.#.....#.....#.#.#.#.#...#.#.........#.....#...#...#...#.#...#\n" +
            "#.#####.#####.###.#.#.#####.#####.#.#.#.###.#.#################.#.#.###.#.#.###.#\n" +
            "#.E...#.#.#..w#...#.#.#.#.Z.#...#.#.#...#...#.#...#.......#.#.U.#...#...#.#...#.#\n" +
            "#.###.#.#.#.###.###.#.#.#.###.#.#.#.#####.###.#.#.#.#####.#.#.###########.#.#.#.#\n" +
            "#.#...#.#...#...#...#.#.#...#.#.#.#.....#...#...#...#...#.#.#.....#.....#.#.#.#.#\n" +
            "#.#.###.#.###.#.#.###.#.###.#.#.#####.#.###.#########.#.#.#.#####.#.###.#.#.#.#.#\n" +
            "#.#...#.#...#.#.#...#.#...#s..#.....#.#.#.#.#.........#.#.#.#...#...#.#...#.#.#.#\n" +
            "#####.#.###.#.#####.#.#.#.#########.#.#.#.#.#.#####.#####.#.#.#.#####.#####.#.#.#\n" +
            "#.....#.#...#.....#...#.#.......#...#.#.#.#.#.#.....#.....#...#.......#.....#...#\n" +
            "#.#####.#########.#####.#######.#.#####.#.#.###.###.#.#####.###.#######.#########\n" +
            "#.#.....#...#...#.....#.#...#...#.#.....#.#.#...#...#.#.#...#.#.....#...#...#..m#\n" +
            "#.#.#####.#.#.#.#.###.#.#.#.#####.#.###.#.#.#.###.###.#.#.###.#####.#.###.#.###.#\n" +
            "#.#.#.....#.#.#...#.#.#...#...#...#...#.#.#...#.....#.#...#.......#...#..e#...#.#\n" +
            "#.#.#####.#.#.#####.#.###.###.#.###.#.###.###.#######.#.#######.#.#####.#####.#.#\n" +
            "#.#...#...#...#.....#...#.#...#.L.#.#...#.#...#...#...#.....#...#...#...#...#...#\n" +
            "#.###.#.#######.###.###.###.#.###.#.###.#.#.###.#.#.#######.#.#####J#.###.#.###.#\n" +
            "#...#...#...#...#.#.......#.#.#...#...#.#.....#.#...#.#.......#.......#...#.#...#\n" +
            "#.#.#######.#.###.#######.#.###.###.###.#.#####.#####.#.###############.#.###.###\n" +
            "#.#.#.......#.#.....#...#...#...#...#...#...#...#.......#...#.#.....#.#.#.....#.#\n" +
            "#.###.#.#####.#.###.###.#####.###.###.#.#####.###.#########.#.#.###.#.#.#######.#\n" +
            "#...#.#.......#...#...#.#...#.#...#.#.#.#.....#.#...#.....#.#...#.#.#.#.....#...#\n" +
            "#.#.#.###########.#.#.#X#.#.#.###.#.#.###.#####.###.#.#.#.#.#####.#.#.#####.###Q#\n" +
            "#j#.#...#.........#.#.#...#.#.V.#...#...#.#.......#.#.#.#...#.....#.#.....#.#...#\n" +
            "###.###.#.#########.#######.#.#.#######.#.###.#.###.#.#.###.#.#.###.#.#.###.#.#.#\n" +
            "#...#...#...#.....#d....#...#.#.#.......#...#.#.#...#.#...#...#.#...#.#.....#.#.#\n" +
            "#.#.#.#####.###.#.###.#.#.#####.#.#####.###.###.#.#######.#####.#.###W#######.#.#\n" +
            "#.#.#.#.......#.#...#.#.#.#..f..#...#.#.#...#...#...#...#...#...#.#.#.....#...#.#\n" +
            "#.#.#.#######.#.#.#.#.###.###.###.#.#.#.#.###.#####.#.#.###.#.###.#.#####.#.###.#\n" +
            "#.#.#.....C.#.#.#.#.#...#.....#...#.#.#.#.#...........#...#.#.#...#.....#...#.#.#\n" +
            "#.#########.#.###.#.###.#######.###.#.#.#.#####.#########.#.###.###.#.#######.#.#\n" +
            "#...#.....#.#.....#...#.....#.....#.#...#.....#.#.......#...#...#...#.........#.#\n" +
            "#.#.#.###.#.###########.###.#######.###.#.###.###.#####.#####.###.#########.#.#.#\n" +
            "#.#.....#.#.......#...#...#t#.....#...#.#...#.....#...#.....#...#.Y.#.#.....#.#.#\n" +
            "#.#######.#######.#.#.###.#.#.###.###.#.###.#######.#######.###.###.#.#.#######.#\n" +
            "#..g#.#...#.......#.#.#...#...#...#...#.#.#.#.....#.......#...#.#.#.#.#....p..#.#\n" +
            "###.#.#N###.#######.#.#.#######.###.###.#.#.#.###.#######.###.#.#.#.#.#######.#.#\n" +
            "#.....#.............#...#........i..#...#.....#.............#...#.........B.#...#\n" +
            "#################################################################################";

}

@Data
class Point {
    final int x;
    final int y;
    @EqualsAndHashCode.Exclude
    String label;

    private Point next(final int dx, final int dy) {
        return new Point(this.x + dx, this.y + dy);
    }

    List<Point> neighbours() {
        List<Point> list = new ArrayList<>(4);
        list.add(this.next(1, 0));
        list.add(this.next(-1, 0));
        list.add(this.next(0, 1));
        list.add(this.next(0, -1));
        return list;
    }

}

@Data
class Navigator {
    private final List<Point> walls = new ArrayList<>();
    private final List<Point> keys = new ArrayList<>();
    private final List<Point> doors = new ArrayList<>();
    private Point start;

    Navigator(final String input) {
        final String[] lines = input.split("\n");
        for (int i = 0; i < lines.length; i++) {
            final char[] chars = lines[i].toCharArray();
            for (int j = 0; j < chars.length; j++) {
                final String s = String.valueOf(chars[j]);
                if (s.equals("#")) {
                    walls.add(new Point(j, i));
                } else if (s.matches("^[a-z]$")) {
                    final Point p = new Point(j, i);
                    p.setLabel(s);
                    keys.add(p);
                } else if (s.matches("^[A-Z]$")) {
                    final Point p = new Point(j, i);
                    p.setLabel(s);
                    doors.add(p);
                } else if (s.equals("@")) {
                    start = new Point(j, i);
                    start.setLabel("@");
                }
            }
        }
    }

    void solve() {
        // some bfs here
        Queue<Path> queue = new ArrayDeque<>();
        Set<Path> visited = new HashSet<>();
        final Path initial = new Path(start, 0, new TreeSet<>());
        queue.add(initial);
        visited.add(initial);
        int counter = 0;
        while (!queue.isEmpty()) {
            final Path head = queue.remove();
            counter++;
            if (counter % 10000 == 0) {
                System.out.println(counter);
            }
            if (head.keys.size() == keys.size()) {
                System.out.println("counter: " + counter);
                System.out.println(head);
                System.out.println(head.distance);
                break;
            }
            final List<Point> neighbours = head.currentLocation.neighbours();
            neighbours.removeIf(walls::contains);
            // if the door is present make sure that you have key for it.
            neighbours.removeIf(p -> {
                if (doors.contains(p)) {
                    final String door = doors.get(doors.indexOf(p)).getLabel();
                    return !head.keys.contains(door.toLowerCase());
                }
                return false;
            });
            final List<Path> collect = neighbours.stream()
                    .map(p -> new Path(p, head.getDistance() + 1, new TreeSet<>(head.keys)))
                    .peek(path -> { // add key if the current location is of key.
                        if (keys.contains(path.currentLocation)) {
                            final String key = keys.get(keys.indexOf(path.currentLocation)).getLabel();
                            path.keys.add(key);
                        }
                    })
                    .filter(p -> !visited.contains(p))// remove if it is visited with list of keys.
                    .collect(Collectors.toList());
            visited.addAll(collect);
            queue.addAll(collect);
        }
    }
}

@Data
class Path {
    final Point currentLocation;
    @EqualsAndHashCode.Exclude
    final int distance;
    final SortedSet<String> keys;
}
